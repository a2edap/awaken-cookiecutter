pipeline:
  type: Ingest

  location_id: "{{ cookiecutter.location_slug }}"
  dataset_name: "{{ cookiecutter.ingest_slug }}"
  # qualifier: ""
  # temporal: ""
  data_level: "a0"

dataset_definition:
  attributes:
    title: "{{ cookiecutter.ingest }}"
    description: "{{ cookiecutter.ingest_description }}"
    conventions: MHKiT-Cloud Data Standards v. 1.0
    institution: Atmosphere to Electrons
    code_url: https://github.com/a2edap/awaken-ingest

  dimensions:
    time:
        length: unlimited

  variables:

    time:
      input:
        name: Timestamp (end of interval)
        converter:
          classname: tsdat.utils.converters.StringTimeConverter
          parameters:
            timezone: UTC
            time_format: "%Y/%m/%d %H:%M:%S"
      dims: [time]
      type: long
      attrs:
        long_name: Time (UTC)
        standard_name: time
        units: seconds since 1970-01-01T00:00:00
    
    example_var:          # Name of variable in the output file
      input:
        name: "Example"   # Name of variable in the input file
        # units: m        # Units the input variable was measured in. Provide this if 
                          # the output units are different and you want tsdat to do the
                          # conversion.
      dims: [time]        # List of coordinates that dimension this variable. `time` is
                          # a very common dimension, sometimes `height`, too.
      type: float         # The data type, typically one of: `float`, `long`, `int`
      attrs:
        long_name: Example Var  # Label used by Xarray and other libraries for plotting
        standard_name: ""       # Standard name from the CF Standard names table. 
                                # Provide this if possible, otherwise remove it.
        units: km               # Units attribute from the CF Standard list of units. 
                                # Always provide this, even for 'unitless' quantities â€“
                                # set `units: "1"` for such quantities.
    
    lat:
      data: 0.0
      dims: []
      type: float
      attrs:
        long_name: Latitude
        units: degree_N
      
    lon:
      data: 0.0
      dims: []
      type: float
      attrs:
        long_name: Longitude
        units: degree_E
    
    alt:
      data: 0.0
      dims: []
      type: float
      attrs:
        long_name: Altitude
        units: m
    
#-----------------------------------------------------------------
quality_management:

  #---------------------------------------------------------------
  manage_missing_coordinates:
    checker:
      classname: tsdat.qc.checkers.CheckMissing
    handlers:
      - classname: tsdat.qc.handlers.FailPipeline
    variables:
      - COORDS

  manage_coordinate_monotonicity:
    checker:
      classname: tsdat.qc.checkers.CheckMonotonic
    handlers:
      - classname: tsdat.qc.handlers.SortDatasetByCoordinate
        parameters:
          ascending: True
          correction: "Coordinate data was sorted in order to ensure monotonicity."
    variables:
      - COORDS

  #---------------------------------------------------------------
  manage_missing_values:
    checker:
      classname: tsdat.qc.checkers.CheckMissing
    handlers:
      - classname: tsdat.qc.handlers.RemoveFailedValues
      - classname: tsdat.qc.handlers.RecordQualityResults
        parameters:
          bit: 1
          assessment: Bad
          meaning: "Value is equal to _FillValue or NaN"
    variables:
      - DATA_VARS
    exclude: [lat, lon, alt]